@page "/Game/{gameId}"
@using System.ComponentModel.DataAnnotations
@inject IGameContext GameContext
@inject NavigationManager NavManager
@implements IAsyncDisposable
@rendermode InteractiveWebAssembly

<PageTitle>@GameId Pointing Party</PageTitle>

<h2 class="text-xl my-2 leading-8 md:mb-4">
    <span class="hidden md:inline">Pointing Party: </span>@GameId
</h2>

@if (GameContext.Game is not null)
{
    <GameUi GameContext="@GameContext" />
}
else
{
    <EditForm Model="NameForm" OnValidSubmit="HandleFormSubmit" FormName="GameData">
        <DataAnnotationsValidator/>
        <div class="my-2">
            <label>
                <span class="text-xs font-medium text-gray-500 uppercase">
                    Your name:
                </span>
                <InputText @bind-Value="NameForm.Name" placeholder="Player Name" class="py-3 px-4 block w-full border-gray-200 rounded-md text-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-slate-900 dark:border-gray-700 dark:text-gray-400"/>
            </label>
        </div>
        <div>
            <FatButton type="submit">Enter game</FatButton>
        </div>
    </EditForm>
}

<div class="text-center text-xs mt-2 md:mt-4">
    <span class="text-gray-500">To invite participants, send them this link:</span><br/>
    <span class="font-medium">
        <a href="https://pointingparty.com/Game/@Uri.EscapeDataString(GameId)">pointingparty.com/Game/@Uri.EscapeDataString(GameId)</a>
    </span>
</div>

@code {

    [Parameter]
    public string GameId { get; set; } = string.Empty;

    protected class FormData
    {
        [Required]
        public string Name { get; set; } = "";
    }

    [SupplyParameterFromForm]
    protected FormData NameForm { get; set; } = new();

    [SupplyParameterFromQuery]
    public string? PlayerName { get; set; }

    private void CreateGame()
    {
        GameContext.CreateGame(GameId, NameForm.Name);
    }

    private void HandleGameEvent()
    {
        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        await GameContext.Initialize(HandleGameEvent);
        if (string.IsNullOrWhiteSpace(PlayerName)) return;

        NameForm.Name = PlayerName;
        CreateGame();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // If game was started from the front page, remove PlayerName query string so the browser location
        // bar has a share-friendly URL
        if (GameContext.Game is not null && !string.IsNullOrWhiteSpace(PlayerName))
             NavManager.NavigateTo($"/Game/{GameId}", replace: true);
    }

    private void HandleFormSubmit()
    {
        PlayerName = NameForm.Name;
        CreateGame();
    }

    public async ValueTask DisposeAsync()
    {
        await GameContext.DisposeAsync();
    }

}
