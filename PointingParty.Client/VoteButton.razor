@using System.Text
<button class="@ClassString()" @onclick="@(_ => OnClick.InvokeAsync())">
    @ChildContent
</button>

@code {

    [Parameter]
    public EventCallback OnClick { get; set; }

    [Parameter]
    public ButtonColor Color { get; set; }

    [Parameter]
    public bool Selected { get; set; } = false;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    public enum ButtonColor
    {
        Blue,
        Indigo,
        Gray
    }

    private string ClassString()
    {
        var primaryColor = Color.ToString().ToLower();
        var str = new StringBuilder("text-2xl px-4 inline-flex justify-center items-center gap-2 rounded-md focus:outline-none focus:ring-2 transition-all ");

        if (Selected)
        {
            str.Append($"py-3 lg:py-7 border-4 border-{primaryColor}-200 text-{primaryColor}-500 focus:outline-none focus:ring-2 focus:ring-{primaryColor}-200 focus:ring-offset-2 transition-all ");
            str.Append(
                Color switch
                {
                    ButtonColor.Blue => "dark:focus:ring-offset-gray-800",
                    ButtonColor.Indigo => "dark:focus:ring-offset-gray-800",
                    _ => "dark:border-gray-700 dark:focus:ring-gray-600 dark:focus:ring-offset-gray-800"
                });
        }
        else
        {
            str.Append($"py-4 lg:py-8 border border-transparent text-white bg-{primaryColor}-500 hover:bg-{primaryColor}-600 focus:ring-{primaryColor}-500 focus:ring-offset-2 ");
            str.Append(
                Color switch
                {
                    ButtonColor.Blue => "dark:focus:ring-offset-gray-800",
                    ButtonColor.Indigo => "dark:focus:ring-offset-gray-800",
                    _ => "dark:bg-gray-700 dark:focus:ring-offset-gray-800"
                });
        }

        return str.ToString();
    }

}