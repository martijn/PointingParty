@using QRCoder
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@inject NavigationManager NavManager

@if (_qrCode is not null)
{
    <div class="mx-auto">
        <button class="p-0 bg-transparent border-0" @onclick="ShowModal" aria-label="Open QR code">
            <img src="data:image/png;base64,@_qrCode" class="w-24" alt="QR code" />
        </button>
    </div>
}

@if (_showModal)
{
    <div class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50" tabindex="0"
         @onclick="HideModal" @onkeydown="HandleKeyDown">
        <div class="max-h-1/2 max-w-1/2 object-contain rounded shadow-lg cursor-zoom-out" @onclick="HideModal">
            <img src="data:image/png;base64,@_qrCode" alt="QR code large" />
        </div>
    </div>
}

@code {

    [Parameter]
    public string GameId { get; set; } = "";

    private readonly QRCodeGenerator _qrGenerator = new();
    private string? _qrCode;
    private bool _showModal;

    protected override void OnParametersSet()
    {
        var generator = new PayloadGenerator.Url(NavManager.BaseUri.TrimEnd('/') + "/Game/" + Uri.EscapeDataString(GameId));
        var payload = generator.ToString();

        var qrCodeData = _qrGenerator.CreateQrCode(payload, QRCodeGenerator.ECCLevel.M);
        var qrCode = new PngByteQRCode(qrCodeData);
        _qrCode = Convert.ToBase64String(qrCode.GetGraphic(16));

        base.OnParametersSet();
    }

    private void ShowModal()
    {
        _showModal = true;
    }

    private void HideModal()
    {
        _showModal = false;
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Escape")
            HideModal();
    }

}
