@using PointingParty.Domain
@using PointingParty.Infrastructure
@rendermode InteractiveServer
@inject GameContext GameContext

<h3 class="text-lg mb-2 text-center">
    Your vote, @PlayerName:
</h3>

<div class="mb-4 grid gap-1 md:gap-2 grid-cols-2 sm:grid-cols-2 md:grid-cols-5">
    <VoteButton OnClick="@(_ => Vote(1))" Color="VoteButton.ButtonColor.Blue" Selected="@(_game.CurrentVote.Equals(1.0))">1</VoteButton>
    <VoteButton OnClick="@(_ => Vote(2))" Color="VoteButton.ButtonColor.Blue" Selected="@(_game.CurrentVote.Equals(2.0))">2</VoteButton>
    <VoteButton OnClick="@(_ => Vote(3))" Color="VoteButton.ButtonColor.Blue" Selected="@(_game.CurrentVote.Equals(3.0))">3</VoteButton>
    <VoteButton OnClick="@(_ => Vote(5))" Color="VoteButton.ButtonColor.Blue" Selected="@(_game.CurrentVote.Equals(5.0))">5</VoteButton>
    <VoteButton OnClick="@(_ => Vote(8))" Color="VoteButton.ButtonColor.Blue" Selected="@(_game.CurrentVote.Equals(8.0))">8</VoteButton>
    <VoteButton OnClick="@(_ => Vote(13))" Color="VoteButton.ButtonColor.Indigo" Selected="@(_game.CurrentVote.Equals(13.0))">13</VoteButton>
    <VoteButton OnClick="@(_ => Vote(21))" Color="VoteButton.ButtonColor.Indigo" Selected="@(_game.CurrentVote.Equals(21.0))">21</VoteButton>
    <VoteButton OnClick="@(_ => Vote(34))" Color="VoteButton.ButtonColor.Indigo" Selected="@(_game.CurrentVote.Equals(34.0))">34</VoteButton>
    <VoteButton OnClick="@(_ => Vote(VoteStatus.Question))" Color="VoteButton.ButtonColor.Gray" Selected="@(_game.CurrentVote.Equals(VoteStatus.Question))">❓</VoteButton>
    <VoteButton OnClick="@(_ => Vote(VoteStatus.Coffee))" Color="VoteButton.ButtonColor.Gray" Selected="@(_game.CurrentVote.Equals(VoteStatus.Coffee))">☕️</VoteButton>
</div>

<h3 class="text-lg mb-2 text-center">
    Results for this round:
</h3>

<div class="md:grid grid-cols-3 gap-4">
    <div>
        <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
            <thead>
            <th scope="col" class="px-6 py-2 text-left text-xs font-medium text-gray-500 uppercase">Player</th>
            <th scope="col" class="px-6 py-2 text-left text-xs font-medium text-gray-500 uppercase">Vote</th>
            </thead>
            <tbody>
            @foreach (var (player, vote) in _game.State.PlayerVotes.OrderBy(x => x.Key))
            {
                <tr>
                    <td class="px-6 py-3 whitespace-nowrap text-gray-800 dark:text-gray-200">@player</td>
                    <td class="px-6 py-3 whitespace-nowrap text-gray-800 dark:text-gray-200">
                        @if (vote.Status != VoteStatus.Pending && player != PlayerName && !_game.State.ShowVotes)
                        {
                            <span>Voted!</span>
                        }
                        else
                        {
                            @vote
                        }
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
    <div class="self-center py-4">
        <div class="text-center">
            <FatButton OnClick="ShowVotes">Show votes</FatButton>
            <FatButton OnClick="ClearVotes">Clear votes</FatButton>
        </div>
    </div>
    <div>
        @if (_game.State.ShowVotes)
        {
            <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                <thead>
                <th scope="col" class="px-6 py-2 text-left text-xs font-medium text-gray-500 uppercase">Score</th>
                <th scope="col" class="px-6 py-2 text-left text-xs font-medium text-gray-500 uppercase">Frequency</th>
                </thead>
                <tbody>
                @foreach (var group in _game.State.PlayerVotes.GroupBy(x => x.Value).OrderBy(g => g.Key))
                {
                    <tr>
                        <td class="px-6 py-3 whitespace-nowrap text-gray-800 dark:text-gray-200">@group.Key</td>
                        <td class="px-6 py-3 whitespace-nowrap text-gray-800 dark:text-gray-200">
                            @group.Count()
                        </td>
                    </tr>
                }
                </tbody>
            </table>
            <div class="mb-2">
                <span class="text-xs font-medium text-gray-500 uppercase">
                    Average score:
                </span>
                <span class="text-gray-800 dark:text-gray-200">
                    @_game.State.PlayerVotes.Average(x => x.Value.Score)
                </span>
            </div>
        }
        else
        {
            <div class="mb-2 text-xs font-medium text-gray-500 uppercase">
                Click 'Show votes' to see results
            </div>
        }
    </div>
</div>

@code {

    [Parameter]
    public string GameId { get; set; } = "";

    [Parameter]
    public string PlayerName { get; set; } = "";

    private GameAggregate _game = default!;

    protected override void OnInitialized()
    {
        _game = GameContext.Start(GameId, PlayerName, HandleGameEvent);
    }

    private void HandleGameEvent()
    {
        InvokeAsync(StateHasChanged);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _game.PlayerJoined();
            GameContext.PublishEvents();
        }
    }

    protected void Vote(double score)
    {
        _game.VoteCast(score);
        GameContext.PublishEvents();
    }

    protected void Vote(VoteStatus status)
    {
        _game.VoteCast(status);
        GameContext.PublishEvents();
    }

    private void ClearVotes()
    {
        _game.GameReset();
        GameContext.PublishEvents();
    }

    private void ShowVotes()
    {
        _game.VotesShown();
        GameContext.PublishEvents();
    }

}
