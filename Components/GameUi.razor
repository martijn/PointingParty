@using PointingParty.Events
@using MassTransit
@attribute [RenderModeServer]
@inject IBus _bus
@inject EventHub _hub

<h3 class="text-lg mb-2 text-center">
    Your vote, @PlayerName:
</h3>

<div class="mb-4 grid gap-1 md:gap-2 grid-cols-2 sm:grid-cols-2 md:grid-cols-5">
    <VoteButton OnClick="@(_ => Vote(1))" Color="VoteButton.ButtonColor.Blue" Selected="@(_myVote == 1)">1</VoteButton>
    <VoteButton OnClick="@(_ => Vote(2))" Color="VoteButton.ButtonColor.Blue" Selected="@(_myVote == 2)">2</VoteButton>
    <VoteButton OnClick="@(_ => Vote(3))" Color="VoteButton.ButtonColor.Blue" Selected="@(_myVote == 3)">3</VoteButton>
    <VoteButton OnClick="@(_ => Vote(5))" Color="VoteButton.ButtonColor.Blue" Selected="@(_myVote == 5)">5</VoteButton>
    <VoteButton OnClick="@(_ => Vote(8))" Color="VoteButton.ButtonColor.Blue" Selected="@(_myVote == 8)">8</VoteButton>
    <VoteButton OnClick="@(_ => Vote(13))" Color="VoteButton.ButtonColor.Indigo" Selected="@(_myVote == 13)">13</VoteButton>
    <VoteButton OnClick="@(_ => Vote(21))" Color="VoteButton.ButtonColor.Indigo" Selected="@(_myVote == 21)">21</VoteButton>
    <VoteButton OnClick="@(_ => Vote(34))" Color="VoteButton.ButtonColor.Indigo" Selected="@(_myVote == 34)">34</VoteButton>
    <VoteButton OnClick="@(_ => Vote(0.1))" Color="VoteButton.ButtonColor.Gray" Selected="@(_myVote == 0.1)">❓</VoteButton>
    <VoteButton OnClick="@(_ => Vote(0.2))" Color="VoteButton.ButtonColor.Gray" Selected="@(_myVote == 0.2)">☕️</VoteButton>
</div>

<h3 class="text-lg mb-2 text-center">
    Results for this round:
</h3>

<div class="md:grid grid-cols-3 gap-4">
    <div>
        <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
            <thead>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Player</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Vote</th>
            </thead>
            <tbody>
            @foreach (var (player, score) in _game.State.PlayerVotes)
            {
                <tr>
                    <td class="px-6 py-4 whitespace-nowrap text-gray-800 dark:text-gray-200">@player</td>
                    <td class="px-6 py-4 whitespace-nowrap text-gray-800 dark:text-gray-200">
                        @if (score is not null && player != PlayerName && !_game.State.ShowVotes)
                        {
                            <span>Voted!</span>
                        }
                        else
                        {
                            @score
                        }
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
    <div class="self-center py-4">
        <div class="text-center">
            <button @onclick="ShowVotes" class="py-3 px-4 inline-flex justify-center items-center gap-2 rounded-md bg-gray-100 border border-transparent font-semibold text-gray-800 hover:text-white hover:bg-gray-800 focus:outline-none focus:ring-2 ring-offset-white focus:ring-gray-800 focus:ring-offset-2 transition-all text-sm dark:bg-gray-700 dark:hover:bg-gray-900 dark:text-white">Show votes</button>
            <button @onclick="ClearVotes" class="py-3 px-4 inline-flex justify-center items-center gap-2 rounded-md bg-gray-100 border border-transparent font-semibold text-gray-800 hover:text-white hover:bg-gray-800 focus:outline-none focus:ring-2 ring-offset-white focus:ring-gray-800 focus:ring-offset-2 transition-all text-sm dark:bg-gray-700 dark:hover:bg-gray-900 dark:text-white">Clear votes</button>
        </div>
    </div>
    <div>
        @if (_game.State.ShowVotes)
        {
            <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                <thead>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Score</th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Frequency</th>
                </thead>
                <tbody>
                @foreach (var group in _game.State.PlayerVotes.GroupBy(x => x.Value))
                {
                    <tr>
                        <td class="px-6 py-4 whitespace-nowrap text-gray-800 dark:text-gray-200">@group.Key</td>
                        <td class="px-6 py-4 whitespace-nowrap text-gray-800 dark:text-gray-200">
                            @group.Count()
                        </td>
                    </tr>
                }
                </tbody>
            </table>
            <div class="mb-2">
                <span class="text-xs font-medium text-gray-500 uppercase">
                    Average score:
                </span>
                <span class="text-gray-800 dark:text-gray-200">
                    @_game.State.PlayerVotes.Average(x => x.Value)
                </span>
            </div>
        }
        else
        {
            <div class="mb-2 text-xs font-medium text-gray-500 uppercase">
                Click 'Show votes' to see results
            </div>
        }
    </div>
</div>

@code {
    private string _btnClass = "text-2xl py-4 lg:py-8 px-4 inline-flex justify-center items-center gap-2 rounded-md border border-transparent bg-blue-500 text-white hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-all dark:focus:ring-offset-gray-800";
    private string _btnClassGray = "text-2xl py-4 lg:py-8 px-4 inline-flex justify-center items-center gap-2 rounded-md border border-transparent bg-gray-500 text-white hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-all dark:bg-gray-700 dark:hover:bg-gray-600 dark:focus:ring-offset-gray-800";
    private string _btnClassIndigo = "text-2xl py-4 lg:py-8 px-4 inline-flex justify-center items-center gap-2 rounded-md border border-transparent bg-indigo-500 text-white hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition-all dark:focus:ring-offset-gray-800";


    [Parameter]
    public string GameId { get; set; }

    [Parameter]
    public string PlayerName { get; set; }

    private GameAggregate _game;
    private double? _myVote;

    protected override void OnInitialized()
    {
        _game = new GameAggregate(GameId);
        _hub.OnEvent += HandleGameEvent; // TODO dispose + leave event
        base.OnInitialized();
    }

    private void HandleGameEvent(IGameEvent e)
    {
        if (e.GameId != GameId) return;
        
        if (e is GameReset) _myVote = null;
        
        _game.Handle(e);
        InvokeAsync(StateHasChanged); // todo await
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) await _bus.Publish(new PlayerJoinedGame(NewId.Next(), GameId, PlayerName));
        await base.OnAfterRenderAsync(firstRender);
    }

    protected async Task Vote(double score)
    {
        _myVote = score;
        await _bus.Publish(new VoteCast(NewId.Next(), GameId, PlayerName, score));
    }

    private async Task ClearVotes()
    {
        _myVote = null;
        await _bus.Publish(new GameReset(NewId.Next(), GameId));
    }

    private async Task ShowVotes()
    {
        await _bus.Publish(new VotesShown(NewId.Next(), GameId));
    }

}
