@using PointingParty.Domain.Events
@inherits TestContext

@code {
    private readonly ITestOutputHelper _testOutputHelper;
    private readonly GameAggregate _game;
    private readonly IGameContext _gameContext;

    private const string PlayerName = "Player";
    private const string GameId = "TestGame";

    public GameUiTests(ITestOutputHelper testOutputHelper)
    {
        _testOutputHelper = testOutputHelper;
        _game = new GameAggregate(GameId, PlayerName);
        _gameContext = Substitute.For<IGameContext>();
        _gameContext.Game = _game;
        
        JSInterop.Mode = JSRuntimeMode.Loose;
    }

    [Fact]
    public void Renders_PlayerName()
    {
        _gameContext.PlayerName.Returns(PlayerName);
        
        var cut = Render(@<GameUi GameContext="@_gameContext"/>);
        cut.Find("h3").TextContent.MarkupMatches($"Your vote, {PlayerName}:");
    }

    [Fact]
    public void Publishes_PlayerJoined_Event()
    {
        Render(@<GameUi GameContext="@_gameContext"/>);

        Assert.Collection(_game.EventsToPublish, e => Assert.IsType<PlayerJoinedGame>(e));
        _gameContext.Received(1).PublishEvents();
    }
    
    [Fact]
    public void Publishes_Vote_Event()
    {
        var cut = Render(@<GameUi GameContext="@_gameContext"/>);
        
        _gameContext.ClearReceivedCalls();
        _game.EventsToPublish.Clear();
        
        cut.FindComponent<VoteButton>().Find("button").Click();

        Assert.Collection(_game.EventsToPublish, e =>
        {
            Assert.IsType<VoteCast>(e);
            Assert.Equal(((VoteCast)e).Vote, 1);
        });
        
        _gameContext.Received(1).PublishEvents();
    }
    
    [Fact]
    public void Publishes_VotesShown_Event()
    {
        var cut = Render(@<GameUi GameContext="@_gameContext"/>);

        _gameContext.ClearReceivedCalls();
        _game.EventsToPublish.Clear();

        cut.FindComponent<FatButton>().Find("button").Click();

        Assert.Collection(_game.EventsToPublish, e =>
        {
            Assert.IsType<VotesShown>(e);
        });

        _gameContext.Received(1).PublishEvents();
    }

    [Fact]
    public void Shows_Players_Alphabetized()
    {
        _game.Handle(new PlayerJoinedGame(GameId, "Player Two"));
        _game.Handle(new PlayerJoinedGame(GameId, "Player Three"));
        
        var cut = Render(@<GameUi GameContext="@_gameContext"/>);

        var results = cut.FindAll(@"table[data-testid=""results""] tbody tr td:first-child");

        Assert.Collection(results,
            e => { Assert.Equal(e.GetInnerText(), PlayerName); },
            e => { Assert.Equal(e.GetInnerText(), "Player Three"); },
            e => { Assert.Equal(e.GetInnerText(), "Player Two"); }
        );
    }

    [Fact]
    public void Hides_Votes_By_Default()
    {
        _game.Handle(new PlayerJoinedGame(GameId, "Player Two"));
        _game.Handle(new VoteCast(GameId, "Player Two", 8));
        
        var cut = Render(@<GameUi GameContext="@_gameContext"/>);
        var results = cut.Find(@"[data-testid=""vote-for-Player Two""]");
        Assert.Equal(results.GetInnerText(), "Voted!");
    }
    
    [Fact]
    public void Shows_Votes_After_VotesShown_Event()
    {
        _game.Handle(new PlayerJoinedGame(GameId, "Player Two"));
        _game.Handle(new VoteCast(GameId, "Player Two", 8));
        _game.Handle(new VotesShown(GameId));

        var cut = Render(@<GameUi GameContext="@_gameContext"/>);
        var results = cut.Find(@"[data-testid=""vote-for-Player Two""]");
        Assert.Equal(results.GetInnerText(), "8");
    }
}
